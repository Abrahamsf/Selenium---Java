import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;
import org.testng.annotations.DataProvider;

import lib.ExcelDataConfig;
import lib.GlobalVariables;

public class TestApi {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();
  GlobalVariables globalVariableObject = new GlobalVariables();  
  
  //Set path to data sheets
  String className = this.getClass().getName();
  String path = globalVariableObject.getDataPath()+className.replace("src.", "")+".xlsx";
  ExcelDataConfig config = new ExcelDataConfig(globalVariableObject.getDataPath()+className+".xlsx");

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    driver.manage().window().maximize();
    baseUrl = "https://www.wikidata.org/w/api.php?action=query&list=search&srsearch=gold&format=json";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }
  
  //	Create Data Looping through excel rows and columns  
  @DataProvider(name = "excelData")
  public Object[][] passData(){
 	 
 	 int rows = config.getRowCount(0);
 	 int columns = config.getColumnCount(0);
 	 
 	 Object[][] data = new Object[rows][columns];
 	 	 
 	  for(int i=0;i<rows;i++){
 		 
 		  for(int c=0;c<columns;c++){
 				   			
 			  data[i][c] = config.getData(0, i, c);
 		  }
 	  
 	  }
 	  
 	  return data;
  }

  @Test(dataProvider = "excelData")
  public void testApi() throws Exception {
	  driver.get(baseUrl);
	  
	  String response = driver.findElement(By.tagName("body")).getText();
	 
  }

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
